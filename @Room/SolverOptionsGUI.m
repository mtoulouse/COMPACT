function SolverOptionsGUI(Rm)
%SOLVEROPTIONSGUI Solver Options GUI function
%   SOLVEROPTIONSGUI takes the room object as an input and allows editing 
%   of the solver options through a created GUI. This includes which 
%   results to generate, the inlet temperature, and the vortex strength 
%   multiplier.

SO = figure('Name','Solver Options',...
    'NumberTitle','off',...
    'menubar','none',...
    'Position',Center_Fig(400,600));

%% Result Settings Panel
RS = uipanel(SO,'Title','Choose Desired Result Data',...
    'Units','normalized',...
    'Position',[0 .35 1 .65]);
%% Flow Settings
FlowCheck = uicontrol(RS,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.1 .9 .6 .05],...
    'String','Calculate Flow (phi, u , v, w)',...
    'Value',Rm.ResultSettings.Phi);

FlowPanel = uipanel(RS,'BorderType','etchedin',...
    'Units','normalized',...
    'Position',[.2 .55 .6 .3],...
    'Title','Flow Solver Diagnostics');

set(FlowCheck,'Callback',{@TogglePanel,FlowPanel})

PhiResidCheck = uicontrol(FlowPanel,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.05 .8 .95 .15],...
    'String','Phi Residual',...
    'Value',Rm.ResultSettings.PhiResidual);

PhiBCCheck = uicontrol(FlowPanel,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.05 .5 .95 .15],...
    'String','Boundary Condition Error',...
    'Value',Rm.ResultSettings.PhiBCError);

FlowTimeCheck = uicontrol(FlowPanel,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.05 .2 .95 .15],...
    'String','Flow Solver Time',...
    'Value',Rm.ResultSettings.FlowTime);

if Rm.ResultSettings.Phi == 0
    set(get(FlowPanel,'Children'),'Enable','off')
end
%% Temperature Settings
TempCheck = uicontrol(RS,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.1 .45 .6 .05],...
    'String','Calculate Temperature (T)',...
    'Value',Rm.ResultSettings.Temp);

TempPanel = uipanel(RS,'BorderType','etchedin',...
    'Units','normalized',...
    'Position',[.2 .2 .6 .25],...
    'Title','Temperature Solver Diagnostics');

set(TempCheck,'Callback',{@TogglePanel,TempPanel})

EnergyResidCheck = uicontrol(TempPanel,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.05 .7 .95 .2],...
    'String','Energy Residual',...
    'Value',Rm.ResultSettings.EnergyResidual);

TempTimeCheck = uicontrol(TempPanel,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.05 .3 .95 .2],...
    'String','Temperature Solver Time',...
    'Value',Rm.ResultSettings.TempTime);

if Rm.ResultSettings.Temp == 0
    set(get(TempPanel,'Children'),'Enable','off')
end
%% Vortex Superposition Settings
VorSupCheck = uicontrol(RS,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.1 .125 .6 .05],...
    'String','Calculate Temp. using Vortex Superposition',...
    'Value',Rm.ResultSettings.VortexSuper);
%% Exergy Destruction Settings
ExerDestCheck = uicontrol(RS,'Style','checkbox',...
    'Units','normalized',...
    'Position',[.1 .05 .6 .05],...
    'String','Calculate Exergy Destruction',...
    'Value',Rm.ResultSettings.ExergyDest);
%% Vortex Superposition Multiplier Panel
VSM = uipanel(SO,'Title','Set Vortex Superposition Multiplier',...
    'Units','normalized',...
    'Position',[0 .25 1 .1]);

VSMText = uicontrol(VSM,'Style','text',...
    'Units','normalized',...
    'Position',[.1 .3 .6 .4],...
    'String','Vortex Strength Multiplier');

VSMBox = uicontrol(VSM,'Style','edit',...
    'Units','normalized',...
    'Position',[.7 .1 .2 .8],...
    'BackgroundColor','w',...
    'String',num2str(Rm.VorSupMult));

set(VorSupCheck,'Callback',{@TogglePanel,VSM})

if Rm.ResultSettings.VortexSuper == 0
    set(get(VSM,'Children'),'Enable','off')
end
%% Inlet Temperature Panel
IT = uipanel(SO,'Title','Set Inlet Temperature',...
    'Units','normalized',...
    'Position',[0 .15 1 .1]);

ITText = uicontrol(IT,'Style','text',...
    'Units','normalized',...
    'Position',[.1 .3 .6 .4],...
    'String','Temperature of Inlet Air (Celsius)');

ITBox = uicontrol(IT,'Style','edit',...
    'Units','normalized',...
    'Position',[.7 .1 .2 .8],...
    'BackgroundColor','w',...
    'String',num2str(Rm.InletTemp));

set(TempCheck,'Callback',{@TogglePanel,[TempPanel, IT]})

if Rm.ResultSettings.Temp == 0
    set(get(IT,'Children'),'Enable','off')
end

%% OK/Cancel Panel + Buttons
OKCanPan = uipanel(SO,...
    'Units','normalized',...
    'Position',[0 0 1 .15]);

OKB = uicontrol(OKCanPan,'Style','pushbutton',...
    'Units','normalized',...
    'Position',[.1 .2 .3 .6],...
    'String','OK',...
    'Callback',@OK_CBK);

CanB = uicontrol(OKCanPan,'Style','pushbutton',...
    'Units','normalized',...
    'Position',[.6 .2 .3 .6],...
    'String','Cancel',...
    'Callback','close(gcf)');

uiwait

%% Callbacks
    function ToggleEditField(src,eventdata,cbox)
        % Disables/enables the editable field associated with a checkbox.
        if get(src,'Value') == get(src,'Max')
            set(cbox,'Enable','on')
        elseif get(src,'Value') == get(src,'Min')
            set(cbox,'Enable','off')
        end
    end
% Note: The above function was used in previous versions but is not in this
% one. It's good to keep, though. Essentially, if you have a checkbox next
% to an editable field, you can unselect the checkbox to gray it out.

    function TogglePanel(src,eventdata,cpanels)
        % Disables/enables the full panel associated with a flow or 
        % temperature solver checkbox.
        for p = 1:length(cpanels)
            panelkids = get(cpanels(p),'Children');
            if get(src,'Value') == get(src,'Max')
                set(panelkids,'Enable','on')
            elseif get(src,'Value') == get(src,'Min')
                set(panelkids,'Enable','off')
            end
        end
    end

    function OK_CBK(src,eventdata)
        % Executes when the OK button is pressed, storing all the new 
        % setting data in their properties.
        % Store ResultSettings Data
        Rm.ResultSettings.Phi = get(FlowCheck,'Value');
        Rm.ResultSettings.PhiResidual = get(PhiResidCheck,'Value');
        Rm.ResultSettings.PhiBCError = get(PhiBCCheck,'Value');
        Rm.ResultSettings.FlowTime = get(FlowTimeCheck,'Value');
        Rm.ResultSettings.Temp = get(TempCheck,'Value');
        Rm.ResultSettings.EnergyResidual = get(EnergyResidCheck,'Value');
        Rm.ResultSettings.TempTime = get(TempTimeCheck,'Value');
        Rm.ResultSettings.VortexSuper = get(VorSupCheck,'Value');
        Rm.ResultSettings.ExergyDest = get(ExerDestCheck,'Value');
        % Store Inlet Temperature
        Rm.InletTemp = str2double(get(ITBox,'String'));
        % Store Vortex Multiplier
        Rm.VorSupMult = str2double(get(VSMBox,'String'));
        close(gcf);
    end
end