classdef ServerRack < FlowObject
    %SERVERRACK Class representing server racks placed within the room.
    %   SERVERRACK is a subclass of FLOWOBJECT, and has added properties
    %   related to heat generation. Additionally, SERVERRACK has a dependent
    %   property to provide relevant values that can be calculated from
    %   other independent properties.

    properties
        HeatGenCharac % The two quantities used to specify heat generation
        % 'Heat Generation' or 'Temperature Rise' or 'Flow Rate'
        HeatGenProfile % Heat generation profile (uniform/centered/custom)
        TempRiseProfile % Average temperature rise of the rack
    end
    properties (Dependent = true)
        Height % Height of the server rack, in [Length]
        HeatGen % Heat generated by the rack
        TempRise % Average temperature rise of the rack
    end
    methods
        function SR = ServerRack(V1,V2,FP,HP,TP,ORI)
            % Constructor for this object. Just calls the superclass
            % constructor.
            SR = SR@FlowObject(V1,V2,FP,ORI);
            SR.HeatGenProfile = HP;
            SR.TempRiseProfile = TP;
        end

        % "get" methods governing the dependent properties. Returns NaN if
        % there is no (finite) heat gen/temp rise profile defined yet.
        function hgt = get.Height(SR)
            hgt = SR.Vertices(2,3)-SR.Vertices(1,3);
        end % Height get method
        function hg = get.HeatGen(SR)
            if ~isempty(SR.HeatGenProfile)
                hg = sum(sum(SR.HeatGenProfile.Value));
            else
                hg = NaN;
            end
        end % HeatGen get method
        function tr = get.TempRise(SR)
            if ~isempty(SR.TempRiseProfile)
                tr = mean(mean(SR.TempRiseProfile.Value));
            else
                tr = NaN;
            end
        end % TempRise get method

        function UpdateHeatGen(Rck,HGProfile,TRProfile,FRProfile)
            % Takes the three profile objects for heat generation, 
            % temperature rise, and flow rate, figures out which two are 
            % being used, and updates the other rack object accordingly.
            HGProf = HGProfile.Value;
            TRProf = TRProfile.Value;
            FRProf = FRProfile.Value;
            rho = Air.rho;
            cp = Air.cp;
            [A,B,ARC,BRC] = GetOutFace(Rck);
            Area = Rck.Room.Resolution^2;
            if any(strcmp(Rck.HeatGenCharac,'Heat Generation')) &&...
                    any(strcmp(Rck.HeatGenCharac,'Temperature Rise'));
                Rck.HeatGenProfile = HGProfile;
                Rck.TempRiseProfile = TRProfile;
                FRProf = HGProf./(rho*cp*Area*TRProf);
                if any(any(~isfinite(FRProf))) % TR = 0 somewhere
                    disp('Temperature rise is zero at some point, leading to indeterminate flow rate. Recheck the profile.')
                end
                Rck.FlowProfile.Value = FRProf;
                Rck.FlowProfile.DistributionType = 'custom';
            elseif any(strcmp(Rck.HeatGenCharac,'Temperature Rise')) &&...
                    any(strcmp(Rck.HeatGenCharac,'Flow Rate'));
                Rck.TempRiseProfile = TRProfile;
                Rck.FlowProfile = FRProfile;
                Rck.HeatGenProfile.Value = rho*cp*Area*FRProf.*TRProf;
                Rck.HeatGenProfile.DistributionType = 'custom';
            elseif any(strcmp(Rck.HeatGenCharac,'Flow Rate')) &&...
                    any(strcmp(Rck.HeatGenCharac,'Heat Generation'));
                Rck.FlowProfile = FRProfile;
                Rck.HeatGenProfile = HGProfile;
                TRProf = HGProf./(rho*cp*Area*FRProf);
%                 if any(any(~isfinite(TRProf))) % FR = 0 somewhere
%                     disp('Flow rate is zero at some point, leading to "infinite" values in the temperature rise profile.')
%                 end
                Rck.TempRiseProfile.Value = TRProf;
                Rck.TempRiseProfile.DistributionType = 'custom';
            end
        end

        % GetFace functions: Since there are two flow faces with server racks
        % as compared to just one for inlets and outlets, two separate
        % functions are made for each case. Orientation refers to flow
        % direction, so the direction is simply reversed for finding the
        % "In" face.
        function [A,B,ARC,BRC] = GetOutFace(SR)
            [A,B,ARC,BRC] = GetFace(SR,SR.Orientation);
        end

        function [A,B,ARC,BRC] = GetInFace(SR)
            [A,B,ARC,BRC] = GetFace(SR,opposite(SR));
        end

        function display(SR)
            % Display function, mostly for debugging. Gives the basic
            % information about the server rack.
            ObjName = ['Server Rack: ' SR.Name];
            Dir = {'west' 'east' 'south' 'north'};
            disp(ObjName)
            disp(['Footprint Vertices (' Air.units '): (' num2str(SR.Vertices(1,1)) ','...
                num2str(SR.Vertices(1,2)) ') and (' ...
                num2str(SR.Vertices(2,1)) ',' num2str(SR.Vertices(2,2)) ')'])
            disp(['Height: ' num2str(SR.Height) ' ' Air.units])
            if SR.HeatGen ~= 0 && SR.FlowRate ~= 0
                disp(['Heat generation characterized by ' ...
                    SR.HeatGenCharac{1} ' and ' SR.HeatGenCharac{2}])
                disp(['Flow: ' SR.FlowProfile.DistributionType ' flow averaging ' num2str(SR.FlowRate) ...
                    ' ' Air.abbr '/s, facing ' Dir{SR.Orientation}])
                disp(['Heat Generation: ' num2str(SR.HeatGen) ...
                    ' W of heat generated in a ' SR.HeatGenProfile.DistributionType ' distribution'])
                disp(['Temperature Rise: ' SR.TempRiseProfile.DistributionType ...
                    ' distribution averaging ' num2str(SR.TempRise) ...
                    ' C across the rack'])
            else
                disp('No flow through.')
            end
        end
    end % methods end
end % classdef end