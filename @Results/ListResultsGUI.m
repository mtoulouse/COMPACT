function ListResultsGUI(ResultData)
%LISTRESULTSGUI GUI showing the extracted results from an object
%   LISTRESULTSGUI takes a Results-class object with raw data generated by
%   a solver, and processes it into a list of different scalar and vector
%   quantities. Options are given for what to do with the data:
%
%   1) Display it. In this case, the function DisplayResults is called.
%   2) Export the raw data to the workspace.
%   3) Save the Result object to file.
%   3b) NEW FEATURE: Also save to any currently open DLCEA proj files
%   4) Re-run the temperature solver off of currently showing flow data.

%% Create Figure
LR = figure('Name',['Result object ' inputname(1) ': created ' ResultData.RunDate],...
    'NumberTitle','off',...
    'menubar','none',...
    'Position',Center_Fig(400,625));
%% Result Set Choice
RSCPanel = uibuttongroup(LR,'Title','Choose Breadth of Data View',...
    'Units','normalized',...
    'Position',[0 .875 1 .125],...
    'SelectionChangeFcn',@ChangeView);

RSCBasic = uicontrol(RSCPanel,'Style', 'togglebutton',...
    'String', 'Basic',...
    'Units','normalized',...
    'Position', [.1 .1 .35 .8]);

RSCFull = uicontrol(RSCPanel,'Style', 'togglebutton',...
    'String', 'Full',...
    'Units','normalized',...
    'Position', [.55 .1 .35 .8]);

%% Result Data List
RLPanel = uipanel(LR,'Title','Choose Result Datum',...
    'Units','normalized',...
    'Position',[0 .1 1 .775]);

ResList = uicontrol(RLPanel,'Style', 'listbox',...
    'Units','normalized',...
    'BackgroundColor','w',...
    'FontSize',11,...
    'Position', [.05 .05 .9 .9]);

%% Result Option Buttons

ResOpt = uipanel(LR,...
    'Units','normalized',...
    'Position',[0 0 1 .1]);

DispResButton = uicontrol(ResOpt,'Style', 'pushbutton',...
    'String', 'Display Result',...
    'Units','normalized',...
    'Position', [.1 .1 .35 .8],...
    'Callback', @Disp_callback);

ExpWkButton = uicontrol(ResOpt,'Style', 'pushbutton',...
    'String', 'Export to Workspace',...
    'Units','normalized',...
    'Position', [.55 .1 .35 .8],...
    'Callback', @Export_callback);

%% Result Option Menu

SavMenu = uimenu(LR,'Label','Save Options');
RerunMenu = uimenu(LR,'Label','Rerun Options');
SaveRes = uimenu(SavMenu,'Label','Save Results to File','Accelerator','S',...
    'Callback',@Save_callback);
SaveRes_DLCEA = uimenu(SavMenu,'Label','Save Results to File AND link to DLCEA data center',...
    'Callback',@Save_DLCEA_callback);
RerunHeat = uimenu(RerunMenu,'Label','Run Heat Code off Flow Results',...
    'Callback',@RunHeat_callback);
RunVS = uimenu(RerunMenu,'Label','Run Vort. Superposition off Temp Results',...
    'Callback',@RunVorSup_callback);

%% Create a list of values
% Creates a list of result values to be shown, with associated information
% like the name of the variable when exported, the preferred display
% method, and the basic/full breadth result classification.
Rm = ResultData.Room;
[room_config,partition_config,u0,v0,w0,Q] = extract_BC_data(Rm);

R = struct('String', {}, 'Data', [], 'Workspace', [], 'Display', [], 'Class', []);
BasList = []; % List indices which correspond to basic-breadth results.

% Check for the presence of the result data, then add it.
% Flow solver results
if ~isempty(ResultData.Phi)
    addresults('<<Flow Solver Results>>',[],[],'none','basic') % Title entry
    phi = ResultData.Phi;
    vflows = extract_vel_flows(phi,room_config,partition_config,Rm.Resolution);
    u = (vflows(:,:,:,2)-vflows(:,:,:,1))./2;
    v = (vflows(:,:,:,4)-vflows(:,:,:,3))./2;
    w = (vflows(:,:,:,6)-vflows(:,:,:,5))./2;
    sp = sqrt(u.^2+v.^2+w.^2);
    addresults(['Phi (potential field, ' Air.abbr '^2/s)'],phi,'phi','3Dscalar','basic',...
        ['U (velocity, ' Air.abbr '/s)'],u,'u','3Dscalar','basic',...
        ['V (velocity, ' Air.abbr '/s)'],v,'v','3Dscalar','basic',...
        ['W (velocity, ' Air.abbr '/s)'],w,'w','3Dscalar','basic',...
        'Total Air Speed',sp,'S','3Dscalar','full',...
        'U/V/W Streamline (display only)',cat(4,u,v,w),[],'3Dvector','basic');
    addresults(['Node-to-node flows, '  Air.abbr '/s)'],vflows,'flows','4Dscalar','full')
    
    if ~isempty(ResultData.PhiResidual)
        addresults(['Phi residual (' Air.abbr '^2/s)'],ResultData.PhiResidual,'phi_resid','3Dscalar','full')
    end
    if ~isempty(ResultData.PhiBCError)
        addresults('Boundary Condition Error',ResultData.PhiBCError,'bc_error','4Dscalar','full')
    end
    if ~isempty(ResultData.FlowTime)
        addresults('Flow solver time (seconds)',ResultData.FlowTime,'flowtime','scalar','basic')
    end
    addresults('Cell mass balance, kg/s',Air.rho*sum(vflows,4),'cmb','3Dscalar','full')
end
% Temperature solver results
if ~isempty(ResultData.Temp)
    addresults('<<Temperature Solver Results>>',[],[],'none','basic') % Title entry
    addresults('Temperature (deg C)',ResultData.Temp,'T','3Dscalar','basic')
    if ~isempty(ResultData.EnergyResidual)
        addresults('Energy residual (watts)',ResultData.EnergyResidual,'E_resid','3Dscalar','full')
    end
    if ~isempty(ResultData.TempTime)
        switch length(ResultData.TempTime)
            case 1
                addresults('Temperature solver time (seconds)',ResultData.TempTime,'temptime','scalar','basic')
            case 2
                addresults('Temperature solver time #1 (seconds)',ResultData.TempTime(1),'temptime1','scalar','basic')
                addresults('Temperature solver time #2 (seconds)',ResultData.TempTime(2),'temptime2','scalar','basic')
        end
    end
    Q_bal = CheckQbal(ResultData);
    addresults('Full room energy balance (watts) (Q_in + Q_gen - Q_out)',Q_bal,'Q_bal','scalar','full')
    addresults('Normalized room energy bal. (% of total heat input)',...
        100*Q_bal/sum(sum(sum(Q))),'perc_Q_bal','scalar','basic')
    if ~isempty(ResultData.ExergyDest)
        addresults('Exergy destruction (watts)',ResultData.ExergyDest,'Exergy_dest','3Dscalar','basic')
        if ~isempty(ResultData.ExergyTime)
            addresults('Exergy solver time (seconds)',ResultData.ExergyTime,'xrgtime','scalar','basic')
        end
    end
end

% VortexSuperposition results
if ~isempty(ResultData.VortexSuper)
    addresults('<<Vortex Superposition Results>>',[],[],'none','basic') % Title entry
    vflows = vflows + ResultData.VortexSuper;
    u = (vflows(:,:,:,2)-vflows(:,:,:,1))./2;
    v = (vflows(:,:,:,4)-vflows(:,:,:,3))./2;
    w = (vflows(:,:,:,6)-vflows(:,:,:,5))./2;
    sp = sqrt(u.^2+v.^2+w.^2);
    addresults(['U (velocity, ' Air.abbr '/s) (+vortex)'],u,'u','3Dscalar','basic',...
        ['V (velocity, ' Air.abbr '/s) (+vortex)'],v,'v','3Dscalar','basic',...
        ['W (velocity, ' Air.abbr '/s) (+vortex)'],w,'w','3Dscalar','basic',...
        'Total Air Speed (+vortex)',sp,'S','3Dscalar','full',...
        'U/V/W Streamline (display only) (+vortex)',cat(4,u,v,w),[],'3Dvector','full');
    addresults(['Node-to-node flows (+vortex), '  Air.abbr '/s)'],vflows,'flows','4Dscalar','full')
    addresults('Cell mass balance (+vortex), kg/s',Air.rho*sum(vflows,4),'cmb_v','3Dscalar','full')
    if ~isempty(ResultData.VortexTime)
        addresults('Vortex superposition time (seconds)',ResultData.VortexTime,'vorttime','scalar','basic')
    end
end

% Basic Room Configuration Stats
addresults('<<Initial Room Configuration>>',[],[],'none','full') % Title entry
addresults('Physical Shape (0 = wall, 1 = air)',room_config,'room_config','3Dscalar','full',...
    'Q (heat generating nodes, watts)',Q,'Q','3Dscalar','full',...
    ['u0 (boundary condition,  ' Air.abbr '/s)'],u0,'u0','3Dscalar','full',...
    ['v0 (boundary condition,  ' Air.abbr '/s)'],v0,'v0','3Dscalar','full',...
    ['w0 (boundary condition,  ' Air.abbr '/s)'],w0,'w0','3Dscalar','full');

% Set the listbox display with the basic-breadth results
set(ResList,'String',{R(BasList).String}')
%% Callbacks

    function ChangeView(src,eventdata)
        % Changes the breadth display between "basic" and "full". Sets the
        % listbox string accordingly.
        switch eventdata.NewValue
            case RSCBasic
                set(ResList,'Value',1,'String',{R(BasList).String}')
            case RSCFull
                set(ResList,'String',{R.String}')
        end
    end


    function Save_callback(src,eventdata)
        % Saves the result object to file.
        addpath(pwd);
        cd('Generated Results');
        uisave('ResultData','ResultsStoredHere.mat')
        cd('..');
        rmpath(pwd);
    end

    function Save_DLCEA_callback(src,eventdata)
        % Saves the result object to file then links to DLCEA.      
        % First save
        addpath(pwd);
        cd('Generated Results');
        [FileName,PathName,FilterIndex] = uiputfile('*.mat','Save Result Object');
        if FileName ~=0
            save([PathName FileName],'ResultData')
        end
        cd('..');
        rmpath(pwd);
        % Second find pj objects, but only if there's an exergy destruction
        % field!
        if ~isempty(ResultData.ExergyDest)
            currwksp = evalin('base','whos');
            str = {};
            dclist = {};
            for rr = 1:length(currwksp)
                if strcmp(currwksp(rr).class,'pj')
                    proj = evalin('base',currwksp(rr).name);
                    for cc = 1:length(proj.datacenterlist)
                        dc = [currwksp(rr).name '.datacenterlist{' num2str(cc) '}'];
                        str{end+1} = [dc ': ' proj.datacenterlist{cc}.name];
                        dclist{end+1} = dc;
                    end
                end
            end
            if ~isempty(str)
                [s,v] = listdlg('PromptString','Select a DLCEA data center to store to:',...
                    'SelectionMode','single',...
                    'Name','Associate results with a DLCEA data center',...
                    'ListSize',[400 200],...
                    'ListString',str);
                if v == 1
                    DC = evalin('base',dclist{s});
                    DC.exair = sum(sum(sum(ResultData.ExergyDest)));
                    DC.roomloc = [PathName FileName];
                    helpdlg('File location and exergy destruction successfully stored to DLCEA data center','Success')
                end
            elseif isempty(str)
                warndlg('There are no DLCEA data centers in the base workspace!','No DLCEA data centers')
            end
        else
            warndlg('The results file you just saved didn''t find exergy, it''s useless to DLCEA!','No Exergy Field')
        end
    end

    function Export_callback(src,eventdata)
        % Exports the raw data behind the result to the base workspace,
        % under the initially specified variable name.
        ind = get(ResList, 'Value'); % list index
        if get(RSCPanel,'SelectedObject') == RSCBasic
            ind = BasList(ind); % corresponding full-list index if only
            % basic results are shown.
        end
        Rtype = R(ind).String;
        Rdat = R(ind).Data;
        Rwk = R(ind).Workspace;
        % Assign variable to workspace. If phi is being exported, note that
        % it is actually two arrays.
        if strcmp(Rwk,'phi')
            assignin('base','phi',Rdat.Bulk)
            assignin('base','phi_corner',Rdat.Corners)
        elseif ~isempty(Rwk)
            assignin('base',Rwk,Rdat)
        end
    end

    function Disp_callback(src,eventdata)
        % Reads the index of the selected result and passes the associated
        % data to DisplayResults.
        ind = get(ResList, 'Value');
        if get(RSCPanel,'SelectedObject') == RSCBasic
            ind = BasList(ind); % corresponding full-list index
        end
        DisplayResults(R(ind),ResultData.Room)
    end

    function RunHeat_callback(src,eventdata)
        % Runs the temperature solver off the current flow results. If
        % there are already temperature results as well, a dialog pops up
        % to confirm the action.
        if ~isempty(ResultData.Temp)
            qstr = 'This will overwrite the current Temperature data. Continue?';
            button = questdlg(qstr,'Warning','Yes','No','Yes');
        else
            button = 'Yes';
        end
        if strcmp(button,'Yes')
            close(gcf);
            Rm.ResultSettings.Temp = 1;
            SolverOptionsGUI(Rm);
            pause(.5)
            [room_config,partition_config,u0,v0,w0,Q] = extract_BC_data(Rm);
            if nnz(Q)>0
                %                 TempResults = SolveHeatFlow(ResultData);
                TempResults = SolveHeatMatrix(ResultData);
                assignin('base', 'TempResults', TempResults);
                figure(ResultData.Room.Figure)
                ListResultsGUI(TempResults)
            else
                errordlg('No heat generation in the room!','Temperature solver stopped')
            end
        end
    end


    function RunVorSup_callback(src,eventdata)
        % Runs the vortex solver off the current temp results. If
        % there are already temperature results as well, a dialog pops up
        % to confirm the action.
        if ~isempty(ResultData.Temp)
            qstr = 'This will work off of, then replace, the current temperature data. Continue?';
            button = questdlg(qstr,'Warning','Yes','No','Yes');
        elseif isempty(ResultData.Temp) && ~isempty(ResultData.Phi)
            qstr = 'Need to generate an initial temperature field first! Proceed?';
            button = questdlg(qstr,'Warning','Yes','No','Yes');
        else
            button = 'Yes';
        end
        if strcmp(button,'Yes')
            close(gcf);
            Rm.ResultSettings.Temp = 1;
            Rm.ResultSettings.VortexSuper = 1;
            SolverOptionsGUI(Rm);
            pause(.25)
            [room_config,partition_config,u0,v0,w0,Q] = extract_BC_data(Rm);
            if nnz(Q)>0
                TempResults = VortexSuperposition(ResultData);
                TempResults = SolveHeatMatrix(TempResults);
                assignin('base', 'TempResults_VS', TempResults);
                figure(ResultData.Room.Figure)
                ListResultsGUI(TempResults)
                % note: add code to this fn!!
            else
                errordlg('No heat generation in the room!','Temperature solver stopped')
            end
        end
    end
%% Q balance function
% Q in - Q out + Qgen. Should be zero.
% Positive means not enough Q is leaving. Negative means too much Q is
% leaving.
    function Q_bal = CheckQbal(ResultData)
        rho = Air.rho;
        cp = Air.cp;
        Q_bal = 0;
        [SR_num I_num O_num P_num Ob_num] = CountObjs(ResultData.Room);
        [room_config,partition_config,u0,v0,w0,Q] = extract_BC_data(ResultData.Room);
        flows = extract_vel_flows(ResultData.Phi,room_config,partition_config,ResultData.Room.Resolution);
        % sum inlet energy
        for kl = 1:I_num
            IL = ResultData.Room.ObjectList.Inlets{kl};
            [A,B,ARC,BRC] = GetFace(IL);
            flow_inlets = -flows(ARC(1):BRC(1),ARC(2):BRC(2),ARC(3):BRC(3),opposite(IL));
            if isempty(IL.AirTemp)
                T_inlet = ResultData.Room.InletTemp;
            else
                T_inlet = IL.AirTemp;
            end
            Q_inlet = rho*cp*ResultData.Room.Resolution^2*T_inlet.*flow_inlets;
            Q_bal = Q_bal-sum(sum(Q_inlet));
        end
        % sum outlet energy
        for kl = 1:O_num
            OL = ResultData.Room.ObjectList.Outlets{kl};
            [A,B,ARC,BRC] = GetFace(OL);
            flow_outlets = flows(ARC(1):BRC(1),ARC(2):BRC(2),ARC(3):BRC(3),opposite(OL));
            if isempty(OL.AirTemp)
                ARC = ARC-1;
                BRC = BRC-1;
                T_outlet = ResultData.Temp(ARC(1):BRC(1),ARC(2):BRC(2),ARC(3):BRC(3));
            else
                T_outlet = OL.AirTemp;
            end
            Q_outlet = rho*cp*ResultData.Room.Resolution^2*T_outlet.*flow_outlets;
            Q_bal = Q_bal+sum(sum(Q_outlet));
        end
        % find the difference
        Q_bal = Q_bal - sum(sum(sum(Q)));
        Q_bal = -Q_bal;
    end


%% Auxiliary Function
    function addresults(varargin)
        % This adds relevant information on an interpretation of result
        % data:
        % R.String is the way the GUI lists the result
        % R.Data is the associated data
        % R.Workspace is the name given to the data if exported to the workspace
        % R.Display is the method of display for the data.
        % R.Class is the class of result ('basic' or 'full')
        % Example: addresults('Energy residual',ResultData.EnergyResidual,'E_resid','3Dscalar','full')
        numres = length(R);
        if mod(length(varargin),5) == 0
            for h = 1:length(varargin)/5
                R(numres+h).String = varargin{5*h-4};
                R(numres+h).Data = varargin{5*h-3};
                R(numres+h).Workspace = varargin{5*h-2};
                R(numres+h).Display = varargin{5*h-1};
                R(numres+h).Class = varargin{5*h};
                if strcmp(R(numres+h).Class,'basic')
                    BasList(end+1) = numres+h;
                end
            end
        else
            disp('SOMETHING IS WRONG IN THE CODE. CONSULT YOUR LOCAL TOULOUSE.')
        end
    end
end